# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2017-11-18 04:58
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import keysApp.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affiliation', models.CharField(max_length=64, unique=True)),
                ('customer_user_id_reqd', models.BooleanField(default=True, help_text='set if a customer with this kind of affiliation needs to provide a netid.')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Affiliation',
                'verbose_name_plural': 'Affiliations',
            },
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(blank=True, max_length=16, null=True)),
                ('last_name', models.CharField(db_index=True, max_length=64)),
                ('first_name', models.CharField(db_index=True, max_length=64)),
                ('phone_number', models.CharField(max_length=64)),
                ('email_address', models.EmailField(max_length=254, unique=True)),
                ('email_is_bad', models.BooleanField(default=False)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('affiliation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='affiliation_cust_ref', to='keysApp.Affiliations')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
            },
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dept_name', models.CharField(max_length=64, unique=True)),
                ('box_number', models.PositiveIntegerField()),
                ('admin_name', models.CharField(blank=True, max_length=64)),
                ('admin_contact', models.CharField(blank=True, max_length=64)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
            },
        ),
        migrations.CreateModel(
            name='Keys',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(db_index=True, help_text='Serial number stamped on the physical key')),
                ('is_retired', models.BooleanField(db_index=True, default=False, help_text='Flag key as retired for loss, destroyed, etc.')),
                ('retirement_type', models.PositiveSmallIntegerField(blank=True, choices=[(None, 'N/A'), (1, 'Lost'), (2, 'Disposed')], db_index=True, default=None, help_text='Type of retirement - required if retired = true.', null=True)),
                ('retirement_comment', models.TextField(blank=True, default='', help_text='Detail why key has been flagged as retired')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Key',
                'verbose_name_plural': 'Keys',
            },
        ),
        migrations.CreateModel(
            name='KeyTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key_type', models.CharField(db_index=True, help_text='Key type code (usually stamped on key)', max_length=32, unique=True)),
                ('description', models.CharField(help_text="Description of this key type's function/use", max_length=128)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Key Type',
                'verbose_name_plural': 'Key Types',
            },
        ),
        migrations.CreateModel(
            name='LoanExceptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_expires', models.DateField(help_text='Date that this exception will expire')),
                ('limit', models.PositiveSmallIntegerField(default=2, help_text='Limit the number of concurrent check outs by this customer of this key type')),
                ('granted_by', models.CharField(db_index=True, max_length=128)),
                ('admin_comment', models.TextField(blank=True, default='', help_text='Notes about this loan exception. Include special circumstances and        information, including associated Connect records.')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(help_text='Customer that this loan exception applies to', on_delete=django.db.models.deletion.CASCADE, related_name='customer_loanExceptions_ref', to='keysApp.Customers')),
                ('key_type', models.ForeignKey(help_text='Type of key the customer is allowed a loan exception of', on_delete=django.db.models.deletion.CASCADE, related_name='key_type_loanExceptions_ref', to='keysApp.KeyTypes')),
            ],
            options={
                'verbose_name': 'Loan Exception',
                'verbose_name_plural': 'Loan Exceptions',
            },
        ),
        migrations.CreateModel(
            name='LoanTerms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_desc', models.CharField(max_length=64, unique=True)),
                ('term_length', models.PositiveSmallIntegerField(default=1)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Loan Term',
                'verbose_name_plural': 'Loan Terms',
            },
        ),
        migrations.CreateModel(
            name='Records',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_out', models.DateTimeField(db_index=True, default=django.utils.timezone.localtime)),
                ('date_due', models.DateTimeField(db_index=True, default=keysApp.models.default_due_time)),
                ('extensions', models.PositiveSmallIntegerField(default=0)),
                ('date_returned', models.DateTimeField(blank=True, null=True)),
                ('is_returned', models.BooleanField(db_index=True, default=False)),
                ('is_overdue', models.BooleanField(db_index=True, default=False)),
                ('number_reminders_sent', models.PositiveSmallIntegerField(default=0)),
                ('date_email_reminder_sent', models.DateTimeField(blank=True, null=True)),
                ('is_lost_broken', models.BooleanField(db_index=True, default=False)),
                ('date_paid_for', models.DateField(blank=True, help_text='Note the date that customer paid for loss/destruction/etc. of key.', null=True)),
                ('payment_notes', models.TextField(blank=True, default='', help_text='Notes regarding payment, including EMS# and Connect REQ#, if applicable.')),
                ('admin_comment', models.TextField(blank=True, default='', help_text='Notes about this key record. Include special circumstances and        information regarding associated Connect records.')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='customer_record_ref', to='keysApp.Customers')),
                ('key', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='key_record_ref', to='keysApp.Keys')),
                ('loan_term', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loan_term_record_ref', to='keysApp.LoanTerms')),
            ],
            options={
                'verbose_name': 'Record',
                'verbose_name_plural': 'Records',
            },
        ),
        migrations.AlterUniqueTogether(
            name='loanterms',
            unique_together=set([('term_desc', 'term_length')]),
        ),
        migrations.AddField(
            model_name='keys',
            name='key_type',
            field=models.ForeignKey(help_text='Type of key', on_delete=django.db.models.deletion.PROTECT, related_name='key_type_key_ref', to='keysApp.KeyTypes'),
        ),
        migrations.AddField(
            model_name='customers',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='department_cust_ref', to='keysApp.Departments'),
        ),
        migrations.AlterUniqueTogether(
            name='records',
            unique_together=set([('customer', 'key', 'date_out', 'is_returned', 'is_overdue')]),
        ),
        migrations.AlterUniqueTogether(
            name='keys',
            unique_together=set([('key_type', 'number')]),
        ),
    ]
